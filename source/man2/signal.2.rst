.. container:: page-top

.. container:: nav-bar

   +----------------------------------+----------------------------------+
   | `m                               | `Linux/UNIX system programming   |
   | an7.org <../../../index.html>`__ | trainin                          |
   | > Linux >                        | g <http://man7.org/training/>`__ |
   | `man-pages <../index.html>`__    |                                  |
   +----------------------------------+----------------------------------+

--------------

signal(2) — Linux manual page
=============================

+-----------------------------------+-----------------------------------+
| `NAME <#NAME>`__ \|               |                                   |
| `SYNOPSIS <#SYNOPSIS>`__ \|       |                                   |
| `DESCRIPTION <#DESCRIPTION>`__ \| |                                   |
| `RETURN VALUE <#RETURN_VALUE>`__  |                                   |
| \| `ERRORS <#ERRORS>`__ \|        |                                   |
| `                                 |                                   |
| CONFORMING TO <#CONFORMING_TO>`__ |                                   |
| \| `NOTES <#NOTES>`__ \|          |                                   |
| `SEE ALSO <#SEE_ALSO>`__ \|       |                                   |
| `COLOPHON <#COLOPHON>`__          |                                   |
+-----------------------------------+-----------------------------------+
| .. container:: man-search-box     |                                   |
+-----------------------------------+-----------------------------------+

::

   SIGNAL(2)               Linux Programmer's Manual              SIGNAL(2)

NAME
-------------------------------------------------

::

          signal - ANSI C signal handling


---------------------------------------------------------

::

          #include <signal.h>

          typedef void (*sighandler_t)(int);

          sighandler_t signal(int signum, sighandler_t handler);


---------------------------------------------------------------

::

          WARNING: the behavior of signal() varies across UNIX versions,
          and has also varied historically across different versions of
          Linux.  Avoid its use: use sigaction(2) instead.  See Portability
          below.

          signal() sets the disposition of the signal signum to handler,
          which is either SIG_IGN, SIG_DFL, or the address of a programmer-
          defined function (a "signal handler").

          If the signal signum is delivered to the process, then one of the
          following happens:

          *  If the disposition is set to SIG_IGN, then the signal is
             ignored.

          *  If the disposition is set to SIG_DFL, then the default action
             associated with the signal (see signal(7)) occurs.

          *  If the disposition is set to a function, then first either the
             disposition is reset to SIG_DFL, or the signal is blocked (see
             Portability below), and then handler is called with argument
             signum.  If invocation of the handler caused the signal to be
             blocked, then the signal is unblocked upon return from the
             handler.

          The signals SIGKILL and SIGSTOP cannot be caught or ignored.


-----------------------------------------------------------------

::

          signal() returns the previous value of the signal handler On
          failure, it returns SIG_ERR, and errno is set to indicate the
          error.


-----------------------------------------------------

::

          EINVAL signum is invalid.


-------------------------------------------------------------------

::

          POSIX.1-2001, POSIX.1-2008, C89, C99.


---------------------------------------------------

::

          The effects of signal() in a multithreaded process are
          unspecified.

          According to POSIX, the behavior of a process is undefined after
          it ignores a SIGFPE, SIGILL, or SIGSEGV signal that was not
          generated by kill(2) or raise(3).  Integer division by zero has
          undefined result.  On some architectures it will generate a
          SIGFPE signal.  (Also dividing the most negative integer by -1
          may generate SIGFPE.)  Ignoring this signal might lead to an
          endless loop.

          See sigaction(2) for details on what happens when the disposition
          SIGCHLD is set to SIG_IGN.

          See signal-safety(7) for a list of the async-signal-safe
          functions that can be safely called from inside a signal handler.

          The use of sighandler_t is a GNU extension, exposed if
          _GNU_SOURCE is defined; glibc also defines (the BSD-derived)
          sig_t if _BSD_SOURCE (glibc 2.19 and earlier) or _DEFAULT_SOURCE
          (glibc 2.19 and later) is defined.  Without use of such a type,
          the declaration of signal() is the somewhat harder to read:

              void ( *signal(int signum, void (*handler)(int)) ) (int);

      Portability
          The only portable use of signal() is to set a signal's
          disposition to SIG_DFL or SIG_IGN.  The semantics when using
          signal() to establish a signal handler vary across systems (and
          POSIX.1 explicitly permits this variation); do not use it for
          this purpose.

          POSIX.1 solved the portability mess by specifying sigaction(2),
          which provides explicit control of the semantics when a signal
          handler is invoked; use that interface instead of signal().

          In the original UNIX systems, when a handler that was established
          using signal() was invoked by the delivery of a signal, the
          disposition of the signal would be reset to SIG_DFL, and the
          system did not block delivery of further instances of the signal.
          This is equivalent to calling sigaction(2) with the following
          flags:

              sa.sa_flags = SA_RESETHAND | SA_NODEFER;

          System V also provides these semantics for signal().  This was
          bad because the signal might be delivered again before the
          handler had a chance to reestablish itself.  Furthermore, rapid
          deliveries of the same signal could result in recursive
          invocations of the handler.

          BSD improved on this situation, but unfortunately also changed
          the semantics of the existing signal() interface while doing so.
          On BSD, when a signal handler is invoked, the signal disposition
          is not reset, and further instances of the signal are blocked
          from being delivered while the handler is executing.
          Furthermore, certain blocking system calls are automatically
          restarted if interrupted by a signal handler (see signal(7)).
          The BSD semantics are equivalent to calling sigaction(2) with the
          following flags:

              sa.sa_flags = SA_RESTART;

          The situation on Linux is as follows:

          * The kernel's signal() system call provides System V semantics.

          * By default, in glibc 2 and later, the signal() wrapper function
            does not invoke the kernel system call.  Instead, it calls
            sigaction(2) using flags that supply BSD semantics.  This
            default behavior is provided as long as a suitable feature test
            macro is defined: _BSD_SOURCE on glibc 2.19 and earlier or
            _DEFAULT_SOURCE in glibc 2.19 and later.  (By default, these
            macros are defined; see feature_test_macros(7) for details.)
            If such a feature test macro is not defined, then signal()
            provides System V semantics.


---------------------------------------------------------

::

          kill(1), alarm(2), kill(2), pause(2), sigaction(2), signalfd(2),
          sigpending(2), sigprocmask(2), sigsuspend(2), bsd_signal(3),
          killpg(3), raise(3), siginterrupt(3), sigqueue(3), sigsetops(3),
          sigvec(3), sysv_signal(3), signal(7)

COLOPHON
---------------------------------------------------------

::

          This page is part of release 5.13 of the Linux man-pages project.
          A description of the project, information about reporting bugs,
          and the latest version of this page, can be found at
          https://www.kernel.org/doc/man-pages/.

   Linux                          2021-03-22                      SIGNAL(2)

--------------

Pages that refer to this page: `alarm(2) <../man2/alarm.2.html>`__, 
`getitimer(2) <../man2/getitimer.2.html>`__, 
`kill(2) <../man2/kill.2.html>`__, 
`pause(2) <../man2/pause.2.html>`__, 
`prctl(2) <../man2/prctl.2.html>`__, 
`sigaction(2) <../man2/sigaction.2.html>`__, 
`sigpending(2) <../man2/sigpending.2.html>`__, 
`sigprocmask(2) <../man2/sigprocmask.2.html>`__, 
`sigreturn(2) <../man2/sigreturn.2.html>`__, 
`sigsuspend(2) <../man2/sigsuspend.2.html>`__, 
`sigwaitinfo(2) <../man2/sigwaitinfo.2.html>`__, 
`syscalls(2) <../man2/syscalls.2.html>`__, 
`wait(2) <../man2/wait.2.html>`__, 
`wait4(2) <../man2/wait4.2.html>`__, 
`bsd_signal(3) <../man3/bsd_signal.3.html>`__, 
`gsignal(3) <../man3/gsignal.3.html>`__, 
`killpg(3) <../man3/killpg.3.html>`__, 
`profil(3) <../man3/profil.3.html>`__, 
`raise(3) <../man3/raise.3.html>`__, 
`siginterrupt(3) <../man3/siginterrupt.3.html>`__, 
`sigqueue(3) <../man3/sigqueue.3.html>`__, 
`sigset(3) <../man3/sigset.3.html>`__, 
`sigvec(3) <../man3/sigvec.3.html>`__, 
`sleep(3) <../man3/sleep.3.html>`__, 
`sysv_signal(3) <../man3/sysv_signal.3.html>`__, 
`systemd.exec(5) <../man5/systemd.exec.5.html>`__, 
`fifo(7) <../man7/fifo.7.html>`__, 
`signal(7) <../man7/signal.7.html>`__, 
`signal-safety(7) <../man7/signal-safety.7.html>`__

--------------

`Copyright and license for this manual
page <../man2/signal.2.license.html>`__

--------------

.. container:: footer

   +-----------------------+-----------------------+-----------------------+
   | HTML rendering        |                       | |Cover of TLPI|       |
   | created 2021-08-27 by |                       |                       |
   | `Michael              |                       |                       |
   | Ker                   |                       |                       |
   | risk <https://man7.or |                       |                       |
   | g/mtk/index.html>`__, |                       |                       |
   | author of `The Linux  |                       |                       |
   | Programming           |                       |                       |
   | Interface <https:     |                       |                       |
   | //man7.org/tlpi/>`__, |                       |                       |
   | maintainer of the     |                       |                       |
   | `Linux man-pages      |                       |                       |
   | project <             |                       |                       |
   | https://www.kernel.or |                       |                       |
   | g/doc/man-pages/>`__. |                       |                       |
   |                       |                       |                       |
   | For details of        |                       |                       |
   | in-depth **Linux/UNIX |                       |                       |
   | system programming    |                       |                       |
   | training courses**    |                       |                       |
   | that I teach, look    |                       |                       |
   | `here <https://ma     |                       |                       |
   | n7.org/training/>`__. |                       |                       |
   |                       |                       |                       |
   | Hosting by `jambit    |                       |                       |
   | GmbH                  |                       |                       |
   | <https://www.jambit.c |                       |                       |
   | om/index_en.html>`__. |                       |                       |
   +-----------------------+-----------------------+-----------------------+

--------------

.. container:: statcounter

   |Web Analytics Made Easy - StatCounter|

.. |Cover of TLPI| image:: https://man7.org/tlpi/cover/TLPI-front-cover-vsmall.png
   :target: https://man7.org/tlpi/
.. |Web Analytics Made Easy - StatCounter| image:: https://c.statcounter.com/7422636/0/9b6714ff/1/
   :class: statcounter
   :target: https://statcounter.com/
